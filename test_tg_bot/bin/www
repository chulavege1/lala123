
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test-tg-bot:server');
// var http = require('http');
const https = require("https");
const http = require('http');
const fs = require("fs");


/**
 * Get port from environment and store in Express.
 */


// Creating object of key and certificate
// // for SSL
// const options = {
//   key: fs.readFileSync("key.pem"),
//   cert: fs.readFileSync("cert.pem"),
// };
  
// Creating https server by passing
// options and app object
let PORT = 3000
const server = https.createServer(app)
  .listen(PORT, function (req, res) {
    console.log(`Server started at port ${PORT} `);
  });


// const serverhttp = http.createServer((req, res) => {
// 	res.writeHead(200, {'Content-Type': 'text/plain'});
// 	res.end('Hello from your app!\n');
// });

// serverhttp.listen(8080);


/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
